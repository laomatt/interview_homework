exit
homeworks
homeworks.any? { |e| e.id == homework_id }
exit
current_user.homeworks.map { |e| e.id }.include?(params[:id].to_i)
params[:id]
current_user.homeworks.map { |e| e.id }.include?(params[:id])
current_user.homeworks.map { |e| e.id }.includes?(params[:id])
current_user.homeworks.map { |e| e.id }.include?(params[:id])
current_user.homeworks.map{|e| e.id }
current_user.homeworks
current_user
HomeworkAssignment
exit
@homework_assignment_overdue.errors.full_messages
exit
@homework_assignment_overdue.errors.full_messages
@homework_assignment_overdue.save
@homework_assignment_overdue.errors.full_messages
exit
@homework_assignment_no_user.errors.full_messages
exit
@homework_assignment_multiple.errors.full_messages
@homework_assignment_multiple.errors
@homework_assignment_multiple.save
@homework_assignment_multiple.errors
exit
exzit
@submission.errors.full_messages
next
@submission.errors.full_messages
@submission.errors
@submission.update_attributes(:score =>130)
@submission.update_attributes(:score =>130).errors
@submission.update_attributes(:score =>130)
@submission.save
@submission
exit
@submission.save
exit
@submission.persisted?
@submission.save
@submission.errors.full_messages
@submission.errors
exit
submission.errors.full_messages
submission.errors
errors
exit
User.all
@student
exit
@student.assign_button(@homework)
@homework2
@homework
@student.assign_button(@homework)
@student.assign_button(@homework2)
@student
User.all
exit
flash
exit
flash
exit
flash[:update]
flash
exit
flash[:error]
flash
response.parsed_body
response.body
response
reponse
exit
flash[:error]
current_user
!(current_user.teacher?) || (current_user != @teacher)
session
response.redirect?
response
response.redirect_url
response.body
exit
flash[:error]
flash[:errors]
exit
response
flash[:errors]
flash[:error]
exit
flash[:error]
flash
exit
html
exit
submission.errors.full_messages
submission.errors
exit
flash[:errors]
exit
@homework_assignment_overdue.save
@homework_assignment_overdue
exit
FactoryGirl.methods
FactoryGirl
exit
@student
@homework_assignment_overdue.id
@homework_assignment_overdue
@homework_assignment_overdue.update_attributes
exit
assigns(:submissions)
exit
flash[:error]
exit
flash[:error]
exit
flash[:error]
exit
flash[:error]
exit
response.body
response.methods
response.message
response
exit
@submission
exit
@submission
@submission.update_attributes(grade_params)
@submission
grade_params
exit
@teacher.id
@teacher
@submission.id
flash[:update]
flash
@submission
exit
Teacher
Teacher.all
@teacher
exit
response.redirect?
@teacher.id
@teacher
@homework
@teacher
response
exit
response.redirect_url
response.redirect_to
response.redirect?
response
exit
response
response.redirect?
reponse
exit
expect(hwa).should be_kind_of(HomeworkAssignment)
hwa = assigns(:homeworks).first
hwa=_
assigns(:homeworks).first
assigns(:homeworks).all.each {|e| puts e}
assigns(:homeworks).all
assigns(:homeworks)
response.homeworks
response[@homeworks]
response.attributes
response
response.body
response.instance_variable_get(:@student)
response.instance_variable_get(:@homeworks)
response.instance_variable_get(:homeworks)
response.instance_variable_get(@homeworks)
response.instance_variable_get(:@homeworks)
response.instance_variable_get
@homeworks
response.homeworks
instance_variables
render_template
methods
response.message
response.instance_variable_names
expect(response.response_code).to be 200
response.response_code
response.parsed_body
response.methods
response
exit
session
session[:user_id] = 1
session
login @student
session @student
User.all
@student
@student.save
Homework.all
Homework
@student
exit
response.redirect?
response.parsed_body
response.body
response.methods
response
JSON.parse(response.parsed_body)
exit
JSON.parse(response.parsed_body)["success"]
exit
JSON.parse(response.parsed_body)["success"]
JSON.parse(response.parsed_body)
response.parsed_body
response.parsed_body.to_json
response.parsed_body
response.methods
response
response.message
exit
response.message
response.methods
response
exit
exitr
params[:model].split('_').map{|e| e.capitalize}.join('').constantize
params[:model]
params
exit
results.group_by.all.map{|e| e.homework.id}
results.all.map{|e| e.homework.id}
results.all.map{|e| e.id}
results
exit
results.distinct.count
results.uniq.count
results.first(10).count
results.count
results
exit
